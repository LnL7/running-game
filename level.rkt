#lang racket/base
(require "helpers.rkt"
         "logger.rkt"
         "range.rkt"
         "score.rkt"
         "velocity.rkt")
(provide MakeDefaultLevel MakeSpeedyLevel)


(define (MakeDefaultLevel #:log [-log (MakeLogger)])
  (let ((level (MakeLevel #:log -log)))
    (level 'friction!                    -10)
    (level 'gravity!                     (MakeVelocity 0 -0.98))
    (level 'player-mass!                 2)
    (level 'player-strafe!               20)
    (level 'player-jump!                 (MakeVelocity 0 70))
    (level 'player-bounce!               (MakeRange 10 30))
    (level 'obstacle-speed!              (MakeRange -20 -5))
    (level 'obstacle-size!               (MakeRange 50 200))
    (level 'obstacle-x!                  (MakeRange 200  600))
    (level 'obstacle-y!                  (MakeRange 0 300))
    (level 'obstacle-cleanup-offset!     -100)
    (level 'obstacle-generate-offset!    800)
    (level 'collectable-mass!            3)
    (level 'collectable-speed!           (MakeRange -50 -5))
    (level 'collectable-x!               (MakeRange 0 890))
    (level 'collectable-y!               (MakeRange 600 2400))
    (level 'collectable-cleanup-offset!  -100)
    (level 'collectable-generate-offset! 0)
    level))

(define (MakeSpeedyLevel #:log [-log (MakeLogger)])
  (let ((level (MakeLevel #:log -log)))
    (level 'friction!                    -5)
    (level 'gravity!                     (MakeVelocity 0 -0.94))
    (level 'player-mass!                 10)
    (level 'player-strafe!               30)
    (level 'player-jump!                 (MakeVelocity 0 170))
    (level 'player-bounce!               (MakeRange 10 30))
    (level 'player-bounce!               (MakeRange 30 60))
    (level 'obstacle-speed!              (MakeRange -50 -20))
    (level 'obstacle-size!               (MakeRange 50 200))
    (level 'obstacle-x!                  (MakeRange 100  700))
    (level 'obstacle-y!                  (MakeRange 0 300))
    (level 'obstacle-cleanup-offset!     -100)
    (level 'obstacle-generate-offset!    800)
    (level 'collectable-mass!            5)
    (level 'collectable-speed!           (MakeRange 10 200))
    (level 'collectable-x!               (MakeRange 100  700))
    (level 'collectable-y!               (MakeRange -50 0))
    (level 'collectable-cleanup-offset!  -100)
    (level 'collectable-generate-offset! 0)
    level))

(define (MakeLevel #:log [-log (MakeLogger)])
  (let ((-gravity   #f)
        (-friction  #f)
        (-pmass     #f)
        (-pstrafe   #f)
        (-pjump     #f)
        (-pbounce   #f)
        (-ospeed    #f)
        (-osize     #f)
        (-ox        #f)
        (-oy        #f)
        (-ocleanup  #f)
        (-ogenerate #f)
        (-cmass     #f)
        (-cspeed    #f)
        (-cx        #f)
        (-cy        #f)
        (-ccleanup  #f)
        (-cgenerate #f)
        (-score     (MakeScore #:log -log)))
    (define (dispatch msg . args)
      (apply
        (case msg
          ((score)                        get-score)
          ((friction)                     get-friction)
          ((gravity)                      get-gravity)
          ((player-mass)                  get-pmass)
          ((player-strafe)                get-pstrafe)
          ((player-jump)                  get-pjump)
          ((player-bounce)                get-pbounce)
          ((obstacle-speed)               get-ospeed)
          ((obstacle-size)                get-osize)
          ((obstacle-x)                   get-ox)
          ((obstacle-y)                   get-oy)
          ((obstacle-cleanup-offset)      get-ocleanup)
          ((obstacle-generate-offset)     get-ogenerate)
          ((collectable-mass)             get-cmass)
          ((collectable-speed)            get-cspeed)
          ((collectable-x)                get-cx)
          ((collectable-y)                get-cy)
          ((collectable-cleanup-offset)   get-ccleanup)
          ((collectable-generate-offset)  get-cgenerate)
          ((friction!)                    set-friction!)
          ((gravity!)                     set-gravity!)
          ((player-mass!)                 set-pmass!)
          ((player-strafe!)               set-pstrafe!)
          ((player-jump!)                 set-pjump!)
          ((player-bounce!)               set-pbounce!)
          ((obstacle-speed!)              set-ospeed!)
          ((obstacle-size!)               set-osize!)
          ((obstacle-x!)                  set-ox!)
          ((obstacle-y!)                  set-oy!)
          ((obstacle-cleanup-offset!)     set-ocleanup!)
          ((obstacle-generate-offset!)    set-ogenerate!)
          ((collectable-mass!)            set-cmass!)
          ((collectable-speed!)           set-cspeed!)
          ((collectable-x!)               set-cx!)
          ((collectable-y!)               set-cy!)
          ((collectable-cleanup-offset!)  set-ccleanup!)
          ((collectable-generate-offset!) set-cgenerate!)
          (else
            (-log 'fatal "method missing" msg kClass)))
        args))

    ;; Properties
    (define (get-score)     -score)
    (define (get-friction)  (or -friction  (warn-nil -log 'friction kClass)))
    (define (get-gravity)   (or -gravity   (warn-nil -log 'gravity kClass)))
    (define (get-pmass)     (or -pmass     (warn-nil -log 'player-mass kClass)))
    (define (get-pstrafe)   (or -pstrafe   (warn-nil -log 'player-strafe kClass)))
    (define (get-pjump)     (or -pjump     (warn-nil -log 'player-jump kClass)))
    (define (get-pbounce)   (or -pbounce   (warn-nil -log 'player-bounce kClass)))
    (define (get-ospeed)    (or -ospeed    (warn-nil -log 'obstacle-speed kClass)))
    (define (get-osize)     (or -osize     (warn-nil -log 'obstacle-size kClass)))
    (define (get-ox)        (or -ox        (warn-nil -log 'obstacle-x kClass)))
    (define (get-oy)        (or -oy        (warn-nil -log 'obstacle-y kClass)))
    (define (get-ocleanup)  (or -ocleanup  (warn-nil -log 'obstacle-cleanup-offset kClass)))
    (define (get-ogenerate) (or -ogenerate (warn-nil -log 'obstacle-generate-offset kClass)))
    (define (get-cmass)     (or -cmass     (warn-nil -log 'collectable-mass kClass)))
    (define (get-cspeed)    (or -cspeed    (warn-nil -log 'collectable-speed kClass)))
    (define (get-cx)        (or -cx        (warn-nil -log 'collectable-x kClass)))
    (define (get-cy)        (or -cy        (warn-nil -log 'collectable-y kClass)))
    (define (get-ccleanup)  (or -ccleanup  (warn-nil -log 'collectable-cleanup-offset kClass)))
    (define (get-cgenerate) (or -cgenerate (warn-nil -log 'collectable-generate-offset kClass)))

    (define (set-friction! friction)   (set! -friction friction))
    (define (set-gravity! gravity)     (set! -gravity gravity))
    (define (set-pmass! pmass)         (set! -pmass pmass))
    (define (set-pstrafe! pstrafe)     (set! -pstrafe pstrafe))
    (define (set-pjump! pjump)         (set! -pjump pjump))
    (define (set-pbounce! pbounce)     (set! -pbounce pbounce))
    (define (set-ospeed! ospeed)       (set! -ospeed ospeed))
    (define (set-osize! osize)         (set! -osize osize))
    (define (set-ox! ox)               (set! -ox ox))
    (define (set-oy! oy)               (set! -oy oy))
    (define (set-ocleanup! ocleanup)   (set! -ocleanup ocleanup))
    (define (set-ogenerate! ogenerate) (set! -ogenerate ogenerate))
    (define (set-cmass! cmass)         (set! -cmass cmass))
    (define (set-cspeed! cspeed)       (set! -cspeed cspeed))
    (define (set-cx! cx)               (set! -cx cx))
    (define (set-cy! cy)               (set! -cy cy))
    (define (set-ccleanup! ccleanup)   (set! -ccleanup ccleanup))
    (define (set-cgenerate! cgenerate) (set! -cgenerate cgenerate))

    ;; Private
    dispatch))


(define (warn-nil logger sym type)
  (logger 'warn "property not initialized" sym type))

(define kClass        'Level)
(define kNullNumber   0)
(define kNullRange    (MakeRange 0 0))
(define kNullVelocity (MakeVelocity 0 0))
