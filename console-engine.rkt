#lang racket/base
(require "logger.rkt"
         "helpers.rkt")
(provide MakeConsoleEngine)



(define (MakeConsoleEngine #:log [-log (MakeLogger)])
  (let ((-scope 0))
    (define (ConsoleEngine msg . args)
      (case msg
        ((rectangle) (apply shape-rectangle args))
        ((ellipse)   (apply shape-ellipse args))
        ((position)  (apply position args))
        ((velocity)  (apply velocity args))
        ((image)     (apply shape-image args))
        ((score)     (apply score args))
        (else
          (-log 'warn "method missing" msg dispatch))))
    (define dispatch ConsoleEngine)

    (define (shape-ellipse ellipse)
      (lambda ()
        (scope)
        (display "ShapeEllipse: <")
        (display (ellipse 'color))
        (display ">")
        (shape ellipse)))

    (define (shape-rectangle rectangle)
      (lambda ()
        (scope)
        (display "ShapeRectangle: <")
        (display (rectangle 'color))
        (display ">")
        (shape rectangle)))

    (define (shape-image image)
      (lambda ()
        (scope)
        (display "ShapeImage: <")
        (display (image 'path))
        (display ">")
        (shape image)))

    (define (position pos)
      (lambda ()
        (let ((x (pos 'x))
              (y (pos 'y)))
          (scope)
          (display "Position:")
          (indent!)
          (scope)
          (display "-x = ")
          (display x)
          (scope)
          (display "-y = ")
          (display y)
          (dedent!))))

    (define (velocity vel)
      (lambda ()
        (let ((horizontal (vel 'horizontal))
              (vertical   (vel 'vertical)))
          (scope)
          (display "Velocity:")
          (indent!)
          (scope)
          (display "-h = ")
          (display horizontal)
          (scope)
          (display "-v = ")
          (display vertical)
          (dedent!))))

    (define (score score)
      (lambda ()
        (let ((curr (score 'current))
              (high (score 'highest)))
          (scope)
          (display "Score:")
          (indent!)
          (scope)
          (display "-c: ")
          (display curr)
          (scope)
          (display "-h: ")
          (display high)
          (dedent!))))

    ;; Private
    (define (shape shape)
      (let ((pos    (shape 'position))
            (width  (shape 'width))
            (height (shape 'height)))
        (indent!)
        (scope)
        (display "-w = ")
        (display width)
        (scope)
        (display "-h = ")
        (display height)
        ((position pos))
        (dedent!)))

    (define (scope)
      (newline)
      (let iter ((ctr -scope))
        (unless (= ctr 0)
          (display " . ")
          (iter (- ctr 1)))))

    (define (indent!) (set! -scope (+ -scope 1)))
    (define (dedent!) (set! -scope (- -scope 1)))

    (-log 'debug "initialized" dispatch)
    dispatch))
